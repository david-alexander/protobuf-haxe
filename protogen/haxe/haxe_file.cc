// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.
// http://code.google.com/p/protobuf/
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Author:  Robert Blackwood (ported from Kenton's)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.

#include <google/protobuf/compiler/haxe/haxe_file.h>
#include <google/protobuf/compiler/haxe/haxe_enum.h>
#include <google/protobuf/compiler/haxe/haxe_enum_decoder.h>
#include <google/protobuf/compiler/haxe/haxe_helpers.h>
#include <google/protobuf/compiler/haxe/haxe_message.h>
#include <google/protobuf/compiler/code_generator.h>
#include <google/protobuf/io/printer.h>
#include <google/protobuf/io/zero_copy_stream.h>
#include <google/protobuf/descriptor.pb.h>
#include <google/protobuf/stubs/strutil.h>

namespace google {
namespace protobuf {
namespace compiler {
namespace haxe {

template<typename GeneratorClass, typename DescriptorClass>
void GenerateSibling(const string& filename, const string& haxe_package, const DescriptorClass* descriptor, OutputDirectory* output_directory)
{
	scoped_ptr<io::ZeroCopyOutputStream> output(
		output_directory->Open(filename));

	io::Printer printer(output.get(), '$');

	printer.Print("// Generated by the protocol buffer compiler.  DO NOT EDIT!\n\n");

	printer.Print("package $package$;\n\n",
		"package", haxe_package);

	GeneratorClass(descriptor).Generate(&printer);
}

FileGenerator::FileGenerator(const FileDescriptor* file)
  : file_(file),
  haxe_package_(FileHaxePackage(file))
{

}

FileGenerator::~FileGenerator()
{

}

bool FileGenerator::Validate(string* error)
{
	// TODO

  return true;
}

void FileGenerator::Generate(io::Printer* printer,int message_number)
{
  // We don't import anything because we refer to all classes by their
  // fully-qualified names in the generated source.

	printer->Print("// Generated by the protocol buffer compiler.  DO NOT EDIT!\n"
				   "\n");
	if (!haxe_package_.empty())
	{
		printer->Print("package $package$;\n"
					   "\n",
					   "package", haxe_package_);
	}

	MessageGenerator(file_->message_type(message_number)).Generate(printer);
}

void FileGenerator::GenerateSiblings(const string& package_dir, OutputDirectory* output_directory) {
	for (int i = 0; i < file_->message_type_count(); i++)
	{
		GenerateEnumSiblings(package_dir, output_directory, file_->message_type(i));
		GenerateMessageSiblings(package_dir, output_directory, file_->message_type(i));
	}

	// TODO: Generate services.
}

void FileGenerator::GenerateEnumSiblings(const string& package_dir, OutputDirectory* output_directory, Descriptor const* message)
{
	for (int i = 0; i < message->enum_type_count(); i++)
	{
		GenerateSibling<EnumGenerator>(package_dir + message->enum_type(i)->name() + ".hx", haxe_package_, message->enum_type(i), output_directory);
		GenerateSibling<EnumDecoderGenerator>(package_dir + "EnumDecoder_" + message->enum_type(i)->name() + ".hx", haxe_package_, message->enum_type(i), output_directory);
	}
}

void FileGenerator::GenerateMessageSiblings(const string& package_dir, OutputDirectory* output_directory, Descriptor const* root_message)
{
	for (int i = 0; i < root_message->nested_type_count(); i++)
	{
		GenerateSibling<MessageGenerator>(package_dir + root_message->nested_type(i)->name() + ".hx", haxe_package_, root_message->nested_type(i), output_directory);
		GenerateMessageSiblings(package_dir, output_directory, root_message->nested_type(i));
	}
}

}  // namespace haxe
}  // namespace compiler
}  // namespace protobuf
}  // namespace google
